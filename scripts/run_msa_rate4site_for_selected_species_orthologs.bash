#!/bin/bash
# Script that automates MSA construction and rate4site analysis

# We will have 4 types of results  -- just for comparison purposes:

# 1) Rate4site results using species tree 
# 	a) with default z-score normalized scores
# 	b) with mean-normalized scores
# 2) Rate4site results using autogenerated species tree
# 	a) with default z-score normalized scores
# 	b) with mean-normalized scores

# We will pick the Rate4site results using species tree and mean-normalized scores


### Do Steps 1 and 2 manually    
### Step 1. Step 2. Make list of species (scientific name) and a mapping file (common name \t scientific name) 
### Step 2. Make species tree with the target protein and the orthologs of interest ### (Done manually before running this script)


### Step 3 (a - d)
output_folder_id=$1 # e.g. 19_orthologs 
species_tree_file=$2 # e.g. taxnames_19_orthologs.nwk 
ortholog_folder_label=$3 # e.g. orthologs 

### Step 3a. Run parse species orthologs into fasta file for MSA for "v_target_h" ###

# ----- Uncomment to run -----
python3 parse_human_selected_species_orthologs_into_fasta_file_for_MSA.py -f "v_target_h" -i $output_folder_id -o $ortholog_folder_label

# ----------------------------

### Step 3b. Run MAFFT to get MSA for the target sequence and its orthologs  ###
## Install MAFFT: See https://mafft.cbrc.jp/alignment/software/ for installation guidelines (I'm using https://mafft.cbrc.jp/alignment/software/ubuntu_on_windows.html)
# ----- Uncomment to run -----
type_analysis=v_target_h

echo \n Running analysis for $type_analysis	
orthologs_fasta_folder="../data/homologs_and_conservation/$ortholog_folder_label/$type_analysis/fasta_fis_for_MSA_$output_folder_id"
msa_results_folder="../data/homologs_and_conservation/$ortholog_folder_label/$type_analysis/MSA_$output_folder_id"
mkdir $msa_results_folder

for targ_fasta in $orthologs_fasta_folder/*; do
	targ_fasta_with_ext=${targ_fasta##*/}
	targ_fasta_id="${targ_fasta_with_ext%.*}"
	targ_fasta_id="${targ_fasta_id%%_*}"
	msa_out_fi=$msa_results_folder/$targ_fasta_id"_msa.fasta"

	# echo $targ_fasta
	# echo $msa_out_fi
	echo Running MSA for $targ_fasta_id
	mafft --auto $targ_fasta > $msa_out_fi
	
done

# ----------------------------

## Step 3c. Run rate4site for species tree and autogenerated tree analyses
# ----- Uncomment to run -----

#Download Rate4Site if not already present
if [ ! -f rate4site ]; then
	echo Downloading Rate4Site tool . . .
	wget https://www.tau.ac.il/~itaymay/cp/rate4site
fi

# Run Rate4Site
type_analysis=v_target_h
echo \n Running analysis for $type_analysis	
orthologs_MSA=../data/homologs_and_conservation/$ortholog_folder_label/$type_analysis/MSA_$output_folder_id

#output folders for rate4site results
rate4site_output_folder_species_tree=../data/homologs_and_conservation/$ortholog_folder_label/$type_analysis/rate4site_species_tree_$output_folder_id
rate4site_output_folder_autogenerate_tree=../data/homologs_and_conservation/$ortholog_folder_label/$type_analysis/rate4site_auto_tree_$output_folder_id

mkdir $rate4site_output_folder_species_tree
mkdir $rate4site_output_folder_autogenerate_tree

for targ_fasta in $orthologs_MSA/*; do
	targ_fasta_with_ext=${targ_fasta##*/}
	targ_fasta_id="${targ_fasta_with_ext%.*}"
	
	targ_fasta_id="${targ_fasta_id%%_*}"

	### Running rate4site with species tree

	rate4site_out_fi_species_tree=$rate4site_output_folder_species_tree/$targ_fasta_id".rate4site.scores" #rate4site normalized scores
	raw_rate4site_out_fi_species_tree=$rate4site_output_folder_species_tree/$targ_fasta_id".rate4site.rawscores" #raw unnormalized rate4site scores

	echo Loading and relabeling species tree for $targ_fasta_id
	
	python3 auto_make_labelled_phylogenetic_trees_for_targ_prots.py -f $type_analysis -m $targ_fasta_with_ext -s $species_tree_file -i $output_folder_id -o $ortholog_folder_label

	species_tree="../data/homologs_and_conservation/$ortholog_folder_label/$type_analysis/relabeled_species_trees_$output_folder_id/$targ_fasta_id.species_tree.nwk"
	
	echo Running rate4site for $targ_fasta_id --species tree

	./rate4site -s $targ_fasta -t $species_tree -o $rate4site_out_fi_species_tree -y $raw_rate4site_out_fi_species_tree
	

	### Running rate4site with default autogenerated tree
	rate4site_out_fi_autogenerate_tree=$rate4site_output_folder_autogenerate_tree/$targ_fasta_id".rate4site.scores" #rate4site normalized scores
	raw_rate4site_out_fi_autogenerate_tree=$rate4site_output_folder_autogenerate_tree/$targ_fasta_id".rate4site.rawscores" #raw unnormalized rate4site scores

	echo Running rate4site for $targ_fasta_id --autogenerated tree
	./rate4site -s $targ_fasta -o $rate4site_out_fi_autogenerate_tree -y $raw_rate4site_out_fi_autogenerate_tree
done

#----------------------------

### Step 3d. Get overall rate4site scores 
# ----- Uncomment to run -----
orthologs_folder=../data/homologs_and_conservation/$ortholog_folder_label
type_analysis=v_target_h
type_analysis_folder=$orthologs_folder/$type_analysis
rate4site_autogenerate_tree_folder=rate4site_auto_tree_$output_folder_id #rate4site results with default autogenerated tree
rate4site_species_tree_folder=rate4site_species_tree_$output_folder_id #rate4site results with our own pre-made species tree

rate4site_overall_scores_folder=rate4site_overall_scores_$output_folder_id
rate4site_all_residue_scores_folder=rate4site_all_residue_scores_$output_folder_id
rate4site_per_protein_scores_folder=rate4site_per_protein_scores_$output_folder_id


# -f: folder name ('all', 'v_target_h', 'h_target_v')
# -r: rate4site result folder 
# -o: output folder for overall scores
# -a: output folder for all categorized residue scores
echo $rate4site_autogenerate_tree_folder
echo $rate4site_species_tree_folder
echo $rate4site_overall_scores_folder
echo $rate4site_all_residue_scores_folder


# Two different score normalization techniques:
# 1) Z-score normalization (mean = 1, std = 0) Default rate4site output. Will be using parse_rate4site_scores_into_dict with file_ext = '.scores'. This will parse z-score-normalized scores into dict.
# 2) Get raw scores from rate4site and normalize by mean on that protein. Will be using compute_mean_normalized_rate4site_scores with file_ext = '.rawscores'. This will normalize by mean and parse normalized scores into a dict

# 1) Get overall conservation using rate4site default normalizated scores(z-score normalized scores)
python3 get_overall_conservation_from_rate4site_results.py -f $type_analysis -r $rate4site_autogenerate_tree_folder -o $rate4site_overall_scores_folder -a $rate4site_all_residue_scores_folder -p $rate4site_per_protein_scores_folder -l $ortholog_folder_label
python3 get_overall_conservation_from_rate4site_results.py -f $type_analysis -r $rate4site_species_tree_folder -o $rate4site_overall_scores_folder -a $rate4site_all_residue_scores_folder -p $rate4site_per_protein_scores_folder -l $ortholog_folder_label

# 2) Use raw rate4site scores and normalize them by the mean (as recommended by Jack et al., PLoS Biol., 2016), then get overall conservation 
python3 normalize_scores_and_get_overall_conservation_from_rate4site_results.py -f $type_analysis -r $rate4site_autogenerate_tree_folder -o $rate4site_overall_scores_folder -a $rate4site_all_residue_scores_folder -p $rate4site_per_protein_scores_folder -l $ortholog_folder_label
python3 normalize_scores_and_get_overall_conservation_from_rate4site_results.py -f $type_analysis -r $rate4site_species_tree_folder -o $rate4site_overall_scores_folder -a $rate4site_all_residue_scores_folder -p $rate4site_per_protein_scores_folder -l $ortholog_folder_label

# ----------------------------


